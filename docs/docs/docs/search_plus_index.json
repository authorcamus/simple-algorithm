{"./":{"url":"./","title":"前言","keywords":"","body":"从头开始学算法 作为算法初学者的我从19年8月份开始在力扣学习算法，到现在AC了700多道题目。 随着打卡题目数量的增多，我发现力扣常见考察的知识点大概有十几种，包括：二分，滑动窗口，双指针，链表，二叉树，字符串处理，dfs + 回溯，单调栈（单调队列），并查集，动态规划，贪心，位运算，数论（质数、约数、欧拉函数、欧几里得算法、中国剩余定理、简单博弈论等），图论（dfs、bfs、flood fill、拓扑排序、二分染色、最短路、最小生成树等）。 我决定按照分类进行总结（参考tags目录 或 推荐阅读），希望对正在学习算法的您有所帮助，详细题解参考algorithms目录 。 ♨️ 推荐阅读 二分 位运算 单调栈 滑动窗口 并查集 DFS+回溯 图的遍历 动态规划 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 09:07:23 "},"chapter/二分.html":{"url":"chapter/二分.html","title":"二分","keywords":"","body":"二分 应用场景 70%的二分都是跟单调性有关，有单调性的题目一般都可以二分。 95%的题目存在两段性的性质。一部分满足，一部分不满足。 算法思想 将区间分为左右两边（分治），判断中点，确定答案在哪一边，每次缩小一半，直到得到最终答案。 需要注意边界问题 模板 二分模板一共有两个，分别适用于不同情况。 算法思路：假设目标值在闭区间[l, r]中， 每次将区间长度缩小一半，当l = r时，我们就找到了目标值。 版本1 当我们将区间[l, r]划分成[l, mid]和[mid + 1, r]时，其更新操作是r = mid或者l = mid + 1; 计算mid时不需要加1。 C++ 代码模板： int bsearch_1(int l, int r) { while (l > 1; if (check(mid)) r = mid; else l = mid + 1; } return l; } 版本2 当我们将区间[l, r]划分成[l, mid - 1]和[mid, r]时，其更新操作是r = mid - 1或者l = mid; 此时为了防止死循环，计算mid时需要加1。 C++ 代码模板： int bsearch_2(int l, int r) { while (l > 1; if (check(mid)) l = mid; else r = mid - 1; } return l; } 练习题 lc33. Search in Rotated Sorted Array (medium) lc34. Find First and Last Position of Element in Sorted Array（medium） lc35. Search Insert Position (easy) lc69. Sqrt(x) (esay) lc74. Search a 2D Matrix (medium) lc153. Find Minimum in Rotated Sorted Array（medium） lc154. Find Minimum in Rotated Sorted Array II (hard) lc162. Find Peak Element（medium） lc275. H-Index II（medium） lc287. Find the Duplicate Number（medium） lc315. Count of Smaller Numbers After Self (hard) lc704. Binary Search（easy） Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 09:12:46 "},"chapter/单调栈.html":{"url":"chapter/单调栈.html","title":"单调栈","keywords":"","body":"单调栈 单调栈分为单调递增栈和单调递减栈 单调递增栈即栈内元素保持单调递增的栈，同理单调递减栈即栈内元素保持单调递减的栈 单调栈里存的是数组元素的值或下标 单调栈的意义：可以在O(N)的时间复杂度，找到两边第一个小于或大于当前元素的值； 常见模型：找出每个数左右两边离它最近（或第一个）大于或小于它的解 单调递增栈用于查找两边第一个小于当前元素的值，单调递减栈用于查找两边第一个大于当前元素的值 一般数组中的单调性问题，题目中隐含第一个或离此元素最近的大于或小于元素的值，这类问题都可以考虑下，用单调栈是否可以求解 动画演示 单调递增栈模板 stack stk; for (int i = 0; i 例题 给定一个长度为N的正整数数组，输出每个数左右两边第一个比它小的数，如果不存在则输出-1。 输入: [3,4,2,7,5] 输出： 左边：[-1, 3, -1, 2, 2] 右边：[2, 2, -1, 5, -1] 单调递增栈 出栈时，栈顶右边第一个更小的 元素是即将入栈的当前元素 入栈时，当前元素 左边的第一个更小的元素 是 栈顶元素 void sumSubarrayMins(vector &A) { int n = A.size(); vector lmin(n, -1); vector rmin(n, -1); stack stk; // 单调递增栈 for (int i = 0; i 时间复杂度O(N)，空间复杂度O(N) 拓展练习 lc907. 子数组的最小值之和 练习题目 lc42. 接雨水 lc84. 柱状图中最大的矩形 单调递增栈 lc85. 最大矩形 在84题基础上可以求解 lc239. 滑动窗口最大值 lc402. 移掉K位数字 贪心 + 单调递增栈，也是一道有趣的题目 lc503. 下一个更大元素 II 求右边大于元素的最近的元素；单调递减栈 + 循环队列 lc768. 最多能完成排序的块 II 特殊的单调递增栈，存储元素为两个边界 lc739. 每日温度 lc901. 股票价格跨度 求大于元素的左边第一个元素和右边第一个元素的跨度 lc962.最大宽度坡 单调栈求整个序列最大跨度问题 跟1124类似 1019.链表中的下一个更大节点 求大于元素的右边最近的元素 lc1124. 表现良好的最长时间段 前缀和 + 单调栈 单调栈求整个序列最大跨度问题 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 09:12:46 "},"chapter/binary-tree/二叉树.html":{"url":"chapter/binary-tree/二叉树.html","title":"二叉树","keywords":"","body":"二叉树 二叉树是一种常见的基础数据结构，以二分叉的特点得名 二叉树节点一般包含值、左节点、右节点三个属性 学习大纲 二叉树涉及到的知识点 一般 包括： 二叉树的遍历 二叉搜索树（一种特殊的二叉树） Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 10:49:58 "},"chapter/binary-tree/二叉树的遍历.html":{"url":"chapter/binary-tree/二叉树的遍历.html","title":"二叉树的遍历","keywords":"","body":"二叉树的遍历 二叉树有深度优先和广度优先两种遍历方式 其中深度优先遍历（dfs）又分为前序、中序、后序三种遍历方式 可以用递归和非递归方式实现 深度优先搜索 前序遍历 中序遍历 后序遍历 宽度优先搜索 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 10:44:35 "},"chapter/binary-tree/深度优先--前序遍历.html":{"url":"chapter/binary-tree/深度优先--前序遍历.html","title":"深度优先--前序遍历","keywords":"","body":"前序遍历 遍历顺序：根左右 递归 func dfs(root){ visit(root) dfs(root.left) dfs(root.right) } 代码实现 class Solution { private: vector ans; public: vector preorderTraversal(TreeNode* root) { dfs(root); return ans; } void dfs(TreeNode* root){ if (!root) return ; ans.push_back(root->val); dfs(root->left); dfs(root->right); } }; 非递归方式 用指针p表示当前位置，用一个来栈记录访问顺序 对于每一个当前节点p，先访问p, 然后右子树入栈，然后访问左子树 栈S; p= root; while(p || S不空){ while(p){ 访问p节点； p的右子树入S; p = p的左子树; } p = S栈顶弹出; } 代码实现 class Solution { public: vector preorderTraversal(TreeNode* root) { vector ans; TreeNode* p = root; vector stk; while (p || !stk.empty()){ while (p){ ans.push_back(p->val); stk.push_back(p->right); p = p->left; } p = stk.back(); stk.pop_back(); } return ans; } }; Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 10:38:25 "},"chapter/binary-tree/深度优先--中序遍历.html":{"url":"chapter/binary-tree/深度优先--中序遍历.html","title":"深度优先--中序遍历","keywords":"","body":"中序遍历 中序遍历：左根右 递归方式 func dfs(root){ dfs(root.left) visit(root) dfs(root.right) } 非递归方式 思路： 先把左子树都进栈，依次出栈，访问左子树，出栈过程把右子树都入栈， 这样访问的顺序就是 左 根 右； 用一个指针p标记当前游标，一个栈保存访问顺序 对于每一个当前节点p，先把左节点全部入栈，在出栈的过程中，依次访问根节点，右子树 栈S; p = root; while(p || S不空){ while(p){ p入S; p = p的左子树; } p = S.top 出栈; 访问p; p = p的右子树; } cpp代码实现 class Solution { public: vector inorderTraversal(TreeNode* root) { if (!root) return {}; vector stk = {}; vector ans; TreeNode* p = root; while (p || !stk.empty()){ while(p){ stk.push_back(p); p = p->left; } p = stk.back(); ans.push_back(p->val); stk.pop_back(); p = p->right; } return ans; } }; Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 10:39:49 "},"chapter/binary-tree/深度优先--后序遍历.html":{"url":"chapter/binary-tree/深度优先--后序遍历.html","title":"深度优先--后序遍历","keywords":"","body":"后序遍历 递归思路 var postorderTraversal = function(root) { let ans = [] function dfs(root){ if (!root) return dfs(root.left) dfs(root.right) ans.push(root.val) } dfs(root) return ans }; 非递归思路 先得到根右左，然后逆序得到左右根 得到根右左的过程类似先序得到根左右，先把右子树访问完，把左子树压栈 栈S; p= root; while(p || S不空){ while(p){ 访问p节点； p的左子树入S; p = p的右子树; } p = S栈顶弹出; } 结果序列逆序; 代码实现： class Solution { public: vector postorderTraversal(TreeNode* root) { vector ans; vector stk; TreeNode* p = root; while (p || !stk.empty()){ while(p){ ans.push_back(p->val); stk.push_back(p->left); p = p->right; } p = stk.back(); stk.pop_back(); } reverse(ans.begin(), ans.end()); return ans; } }; Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 10:41:11 "},"chapter/binary-tree/广度优先遍历.html":{"url":"chapter/binary-tree/广度优先遍历.html","title":"广度优先遍历","keywords":"","body":"广度优先遍历 也叫 层遍历，BFS 遍历过程是从上到下，一层一层的，更接近人的思维 实现方式 BFS 需要 借助 队列 来实现 应用场景 求解最短、最小路径问题 图的拓扑排序 最短路问题求解（dijkstra算法等） 优点和缺点 优点： 接近人的思维，易于理解 不会爆栈 求最短路 缺点： 代码实现较长 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 10:54:37 "},"chapter/binary-tree/二叉搜索树.html":{"url":"chapter/binary-tree/二叉搜索树.html","title":"二叉搜索树","keywords":"","body":"二叉搜索树 二叉搜索树的性质： 结点左子树中所含结点的值小于等于当前结点的值 结点右子树中所含结点的值大于等于当前结点的值 左子树和右子树都是二叉搜索树 判断条件： 中序遍历是递增序列的二叉树一定是二叉搜索树，可以利用中序遍历是否有序判断是否二叉搜索树 根节点大于所有左子树节点，如果根节点大于左子树的最大值节点即可，因为左子树的最大值位于左子树最右边的节点，所以只要根节点 > 左子树的最右节点即可；同理，根节点 练习题目 530.二叉搜索树的最小绝对差 利用性质：二叉搜索树的中序遍历是递增序列 二叉搜索树中第k小的元素 利用性质：二叉搜索树的中序遍历是递增序列，遍历到第k个元素返回 二叉搜索树中的众数 利用性质：二叉搜索树的中序遍历是递增序列 二叉搜索树的范围和 利用性质：二叉搜索树的中序遍历是递增序列 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 10:45:13 "},"chapter/动态规划.html":{"url":"chapter/动态规划.html","title":"动态规划","keywords":"","body":"动态规划 动态规划（Dynamic Programming）是一种分阶段求解策略问题的数学思想。 动态规划中包含三个重要概念：最优子结构、边界、状态转移公式。 最优子结构，求解一个问题时，首先要找出问题的最优子结构； 边界，边界是最简的最优子结构，无需再简化便可得到结果；如果一个问题没有边界，将无法得到有限的结果； 状态转换方程，是阶段与阶段直接的转换关系 动态规划类似于高中数学的数学归纳法 求解过程 确定状态 研究最优策略的最后一步，转化为子问题，定义最优子结构 转换方式 根据子问题定义和最后一步求解过程，抽象出状态转换方程 初始条件和边界情况 细心，考虑周全 计算顺序 利用之前的计算结果 动态规划题目特点 计数 有多少种方式走到右下角 有多少种方法选出k个数使得和为sum 求最值 从左上角走到右下角路径的最大数字和 求最长上升子序列的长度 求存在性 青蛙过河，能否跳到最后一个位置 取石子游戏，先手是否必胜 能不能选出k个数使得和是sum 常见动态规划类型 坐标型动态规划(20%) 重点 序列型动态规划(20%) 重点 划分型动态规划(20%) 重点 区间型动态规划(15%) 重点 背包型动态规划(10%) 双序列型动态规划(5%) 博弈型动态规划(5%) 综合性动态规划(5%) 位操作型动态规划 (了解) 状态压缩DP (了解) 坐标型动态规划 坐标记录状态 可以用滚动数组进行空间优化 硬币组合（一维坐标） 足够的2，5，7面值的硬币，问最少用多少个硬币能组合出面值27（有多少种方式凑出面值27） (力扣518零钱兑换II) f(i) 表示凑出i元所有的最少硬币数（凑出i元的方案数） 不同路径（二维坐标） 机器人从左上角走到右下角，有多少种走法 最小路径和（力扣64） 炸弹袭击(领扣553) 二维矩阵中的格子为空，敌人，墙，炸弹可以放在任意空地上，炸弹会杀死同一行和同一列没有墙阻隔的敌人；问一个炸弹杀死的最大敌人数 最长序列（属于坐标型动态规划） 最长上升子序列(LIS)（力扣300）一维 最长公共子序列(LCS)（力扣1143）二维 序列型动态规划 f[0] 往往表示空序列 有时候会有K维序列，表示K种状态 房子涂色 k种颜色，费用不一样，相邻房子颜色不能相同，求最小花费 打家劫舍（力扣198,213） 六道股票问题 121.买卖股票的最佳时机 122.买卖股票的最佳时机II 123.买卖股票的最佳时机III 188.买卖股票的最佳时机IV 309.最佳买卖股票时机含冷冻期 714.买卖股票的最佳时机含手续费 俄罗斯套娃（力扣354题） O(N^2) 优化成 O(NlogN) TODO 划分型动态规划 给定长度为N的序列，要求划分为若干段 段数不限，或指定K段 每一段满足一定的性质（最小代价，能不能等） 做法： 类似于序列型动态规划，但是通常要加上段数信息 一般用f[i + 1][k]来记录前i个元素（元素0~i-1,f[0][k]表示空序列）分成k段的性质，如最小代价 关注最后一段，枚举最后一段可能情况 + 前面序列, 求最优策略 注意：划分型动态规划每一段序列一定是连续的 数字规律一类题目（一维坐标） 把一个完整的数字分成几个，满足一定的性质 完全平方数（力扣279） 整数拆分（力扣343） 解码方法（力扣91题） 一条包含字母 A-Z 的消息通过以下方式进行了编码：'A' -> 1；'B' -> 2；...；'Z' -> 26 给定一个只包含数字的非空字符串，请计算解码方法的总数。 分割回文串(力扣132,1278) 给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。返回符合要求的最少分割次数。（力扣132） 划分型动态规划 修改字符组成k个回文子串的最小修改代价（力扣1278. 分割回文串 III） 划分型动态规划 + k组信息 抄写书籍（领扣437），分割数组的最大值(力扣410) N本书，每本有A[i]页；K个抄写员，每个抄写员可以抄连续的几本书；抄写员抄写速度一样；问最少需要多长时间抄写完毕。 可以用贪心，动态规划更通用，如果稍微变形，贪心就不可以用了 兼职规划找工作（力扣1235），出租车派单（力扣1235拓展） 如果有k个人员(出租车)怎么解？ 区间型动态规划 一般用二维数组表示区间 区间问题只需要考虑 区间头和区间尾 区间型动态规划一般都是hard难度，不过掌握规律，其实也不难 最长回文子序列（力扣516题） 石子游戏（力扣877题） 扰乱字符串（力扣87题） 戳气球(力扣312题) 记忆化搜索跟递推比较 记忆化搜索没法优化，递推可以用滚动数组优化 背包型动态规划 N个物品，有重量数组w,和价值数组v,背包承重为M 求背包能装的最大重量（领扣92） 求背包能装的最大价值(领扣125) 01背包问题，从最大体积向0体积枚举； 完全背包问题，从0体积向最大体积枚举； 一和零 （力扣474） 01背包的变种 双序列型动态规划 最长公共子序列（LCS）（力扣1143题） 应用：比较两篇文章相似程度，前后版本修改等等 交错字符串（力扣97题） 编辑距离（力扣72题） 不同的子序列(力扣115题) 正则表达式匹配（力扣10，44） 博弈型动态规划 博弈型动态规划跟其他类型动态规划不同：博弈型往往从第一步开始分析 石子游戏 （力扣877） 位操作型动态规划 比特位计数(力扣338) 给定N，求0，1，2，...,N每个数的二进制表示中1的个数 状态压缩DP（了解 hard） AcWing 91. 最短Hamilton路径（最短哈密顿距离） 力扣 1349. 参加考试的最大学生数 动态规划求最优解 以01背包为例 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 09:12:46 "},"chapter/union-find/并查集.html":{"url":"chapter/union-find/并查集.html","title":"并查集","keywords":"","body":"概念 并查集(Union-Find Set)，也称为不相交集数据结构（Disjointed Set Data Structure）， 指一系不相交的集合(Sets)，提供合并（Union）和查找(Find)两种操作。 总结：一种用来 解决集合查询合并 的数据结构，支持 近乎O(1)的find操作 和 近乎O(1)的union操作 两个基本操作 find(int i) 判断是否属于同一集合 find(i)即查找I所归属的集合，通常我们使用find(i)和find(j)判断i和j是否连通，即是否属于同一个集合 union(int i , int j) 将两个集合进行合并 顾名思义，union方法即将I和J所在的两个集合连通起来，执行这个方法后，I所在集合和所有元素和J所在集合的所有元素都连通 可以解决的问题（适用场景） 有N个点，用M条线进行两两相连的操作（相连即为合并操作） 问A点和B点是否连通 判断 find(A) == find(B) 问连通块的总个数 for i:0~n; cnt+= i != find(i) 问A点所在连通块的节点个数 for i:0~n; find(A) == find(i) && cnt++ 判断是否存在环路 进行合并操作时，先判断是否连通，如果已经连通，则存在环路，此时进行合并会死循环 拓展阅读 算法导论-第21章:用于不想交集合的数据结构 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 10:32:00 "},"chapter/union-find/代码模板.html":{"url":"chapter/union-find/代码模板.html","title":"代码模板","keywords":"","body":"代码模板 初始化 for (int i = 0; i 查找find int find(int x) { if (p[x] == x) return x; return p[x] = find(p[x]); // 带路径压缩 } 合并Union 老大哥之间合并，跟小弟没关系 void unionA(int a, int b){ p[find(a)] = find(b); } 完整版代码 int f[N]; for (int i = 0; i 带rank的路径压缩实现（了解） class Solution { public: void makeSet(int n){ vector p(n, 0); for (int i = 0; i rank(n, 0); } int find(vector &p, int x) { if (p[x] != x) { p[x] = find(p, p[x]); //路径压缩 } return p[x]; } void unionSet(vector &p, vector &rank, int x, int y) { x = find(p, x); y = find(p, y); if (rank[x] Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 10:25:30 "},"chapter/union-find/练习题目.html":{"url":"chapter/union-find/练习题目.html","title":"拓展练习","keywords":"","body":"练习题目 LeetCode 200. Number of Islands（medium） LeetCode 547. Friend Circles（medium） 基础的并查集 LeetCode 1319. Number of Operations to Make Network Connected (medium) 基础的并查集 765. Couples Holding Hands（hard） 很好的题目，一题多解 [mark] 684. Redundant Connection (Medium) TODO Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 10:26:06 "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 09:08:52 "}}