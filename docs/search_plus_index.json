{"./":{"url":"./","title":"前言","keywords":"","body":"从零开始学算法 力扣常见考察的知识点大概有十几种，包括：二分，滑动窗口，双指针，链表，二叉树，字符串处理，dfs + 回溯，单调栈（单调队列），并查集，动态规划，贪心，位运算，数论（质数、约数、欧拉函数、欧几里得算法、中国剩余定理、简单博弈论等），图论（dfs、bfs、flood fill、拓扑排序、二分染色、最短路、最小生成树等）。 这本电子书 的 目的就是对上述知识点进行归纳总结，同时会列举一些习题供读者练习，希望通过阅读此书对您能够有所帮助，谢谢！ 本书中的力扣题目题解可以参考力扣题解 ♨️ 推荐阅读 二分 位运算 单调栈 滑动窗口 并查集 DFS和回溯 图的遍历 动态规划 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-11 22:59:46 "},"Questions.html":{"url":"Questions.html","title":"力扣题解","keywords":"","body":" 1-100 1.two-sum 2.add-two-numbers 3.longest-substring-without-repeating-characters 4.median-of-two-sorted-arrays 5.longest-palindromic-substring 6.zigzag-conversion 7.reverse-integer 8.string-to-integer-atoi 9.palindrome-number 10.regular-expression-matching 11.container-with-most-water 12.integer-to-roman 13.roman-to-integer 14.longest-common-prefix 15.3sum 16.3sum-closest 17.letter-combinations-of-a-phone-number 18.4sum 19.remove-nth-node-from-end-of-list 20.valid-parentheses 21.merge-two-sorted-lists 22.generate-parentheses 23.merge-k-sorted-lists 24.swap-nodes-in-pairs 25.reverse-nodes-in-k-group 26.remove-duplicates-from-sorted-array 28.implement-strstr 29.divide-two-integers 30.substring-with-concatenation-of-all-words 31.next-permutation 32.longest-valid-parentheses 33.search-in-rotated-sorted-array 34.find-first-and-last-position-of-element-in-sorted-array 35.search-insert-position 36.valid-sudoku 37.sudoku-solver 38.count-and-say 39.combination-sum 40.combination-sum-ii 41.first-missing-positive 42.trapping-rain-water 43.multiply-strings 44.wildcard-matching 45.jump-game-ii 46.permutations 47.permutations-ii 48.rotate-image 49.group-anagrams 51.n-queens 52.n-queens-ii 53.maximum-subarray 54.spiral-matrix 55.jump-game 56.merge-intervals 57.insert-interval 58.length-of-last-word 59.spiral-matrix-ii 60.permutation-sequence 61.rotate-list 62.unique-paths 63.unique-paths-ii 64.minimum-path-sum 66.plus-one 69.sqrtx 70.climbing-stairs 71.simplify-path 72.edit-distance 74.search-a-2d-matrix 75.sort-colors 76.minimum-window-substring 77.combinations 78.subsets 79.word-search 80.remove-duplicates-from-sorted-array-ii 81.search-in-rotated-sorted-array-ii 83.remove-duplicates-from-sorted-list 84.largest-rectangle-in-histogram 85.maximal-rectangle 86.partition-list 87.scramble-string 88.merge-sorted-array 89.gray-code 90.subsets-ii 91.decode-ways 92.reverse-linked-list-ii 93.restore-ip-addresses 94.binary-tree-inorder-traversal 95.unique-binary-search-trees-ii 96.unique-binary-search-trees 97.interleaving-string 98.validate-binary-search-tree 101-200 101.symmetric-tree 105.construct-binary-tree-from-preorder-and-inorder-traversal 108.convert-sorted-array-to-binary-search-tree 109.convert-sorted-list-to-binary-search-tree 111.minimum-depth-of-binary-tree 115.distinct-subsequences 117.populating-next-right-pointers-in-each-node-ii 119.pascals-triangle-ii 120.triangle 121.best-time-to-buy-and-sell-stock 122.best-time-to-buy-and-sell-stock-ii 123.best-time-to-buy-and-sell-stock-iii 124.binary-tree-maximum-path-sum 125.valid-palindrome 126.word-ladder-ii 127.word-ladder 128.longest-consecutive-sequence 129.sum-root-to-leaf-numbers 130.surrounded-regions 131.palindrome-partitioning 132.palindrome-partitioning-ii 134.gas-station 135.candy 136.single-number 137.single-number-ii 139.word-break 140.word-break-ii 141.linked-list-cycle 142.linked-list-cycle-ii 144.binary-tree-preorder-traversal 145.binary-tree-postorder-traversal 146.lru-cache 147.insertion-sort-list 148.sort-list 150.evaluate-reverse-polish-notation 151.reverse-words-in-a-string 152.maximum-product-subarray 153.find-minimum-in-rotated-sorted-array 154.find-minimum-in-rotated-sorted-array-ii 155.min-stack 159.longest-substring-with-at-most-two-distinct-characters 160.intersection-of-two-linked-lists 161.one-edit-distance 165.compare-version-numbers 166.fraction-to-recurring-decimal 168.excel-sheet-column-title 169.majority-element 171.excel-sheet-column-number 172.factorial-trailing-zeroes 173.binary-search-tree-iterator 176.second-highest-salary 177.nth-highest-salary 178.rank-scores 179.largest-number 180.consecutive-numbers 181.employees-earning-more-than-their-managers 186.reverse-words-in-a-string-ii 187.repeated-dna-sequences 188.best-time-to-buy-and-sell-stock-iv 189.rotate-array 190.reverse-bits 192.word-frequency 193.valid-phone-numbers 195.tenth-line 196.delete-duplicate-emails 197.rising-temperature 198.house-robber 200.number-of-islands 201-300 201.bitwise-and-of-numbers-range 202.happy-number 203.remove-linked-list-elements 204.count-primes 205.isomorphic-strings 206.reverse-linked-list 207.course-schedule 208.implement-trie-prefix-tree 209.minimum-size-subarray-sum 210.course-schedule-ii 211.add-and-search-word-data-structure-design 212.word-search-ii 213.house-robber-ii 214.shortest-palindrome 215.kth-largest-element-in-an-array 216.combination-sum-iii 217.contains-duplicate 218.the-skyline-problem 219.contains-duplicate-ii 220.contains-duplicate-iii 221.maximal-square 222.count-complete-tree-nodes 224.basic-calculator 225.implement-stack-using-queues 226.invert-binary-tree 227.basic-calculator-ii 228.summary-ranges 229.majority-element-ii 230.kth-smallest-element-in-a-bst 232.implement-queue-using-stacks 234.palindrome-linked-list 235.lowest-common-ancestor-of-a-binary-search-tree 236.lowest-common-ancestor-of-a-binary-tree 237.delete-node-in-a-linked-list 238.product-of-array-except-self 239.sliding-window-maximum 240.search-a-2d-matrix-ii 242.valid-anagram 243.shortest-word-distance 244.shortest-word-distance-ii 245.shortest-word-distance-iii 252.meeting-rooms 253.meeting-rooms-ii 256.paint-house 257.binary-tree-paths 258.add-digits 260.single-number-iii 264.ugly-number-ii 265.paint-house-ii 266.palindrome-permutation 267.palindrome-permutation-ii 268.missing-number 274.h-index 277.find-the-celebrity 278.first-bad-version 279.perfect-squares 280.wiggle-sort 283.move-zeroes 286.walls-and-gates 287.find-the-duplicate-number 289.game-of-life 292.nim-game 295.find-median-from-data-stream 297.serialize-and-deserialize-binary-tree 299.bulls-and-cows 300.longest-increasing-subsequence 301-400 303.range-sum-query-immutable 304.range-sum-query-2d-immutable 306.additive-number 307.range-sum-query-mutable 309.best-time-to-buy-and-sell-stock-with-cooldown 310.minimum-height-trees 313.super-ugly-number 315.count-of-smaller-numbers-after-self 316.remove-duplicate-letters 317.shortest-distance-from-all-buildings 322.coin-change 325.maximum-size-subarray-sum-equals-k 326.power-of-three 328.odd-even-linked-list 329.longest-increasing-path-in-a-matrix 334.increasing-triplet-subsequence 337.house-robber-iii 340.longest-substring-with-at-most-k-distinct-characters 343.integer-break 344.reverse-string 346.moving-average-from-data-stream 347.top-k-frequent-elements 349.intersection-of-two-arrays 350.intersection-of-two-arrays-ii 351.android-unlock-patterns 354.russian-doll-envelopes 357.count-numbers-with-unique-digits 358.rearrange-string-k-distance-apart 365.water-and-jug-problem 370.range-addition 371.sum-of-two-integers 373.find-k-pairs-with-smallest-sums 378.kth-smallest-element-in-a-sorted-matrix 380.insert-delete-getrandom-o1 382.linked-list-random-node 386.lexicographical-numbers 387.first-unique-character-in-a-string 392.is-subsequence 394.decode-string 395.longest-substring-with-at-least-k-repeating-characters 400.nth-digit 401-500 401.binary-watch 402.remove-k-digits 403.frog-jump 404.sum-of-left-leaves 405.convert-a-number-to-hexadecimal 406.queue-reconstruction-by-height 407.trapping-rain-water-ii 408.valid-word-abbreviation 409.longest-palindrome 410.split-array-largest-sum 412.fizz-buzz 413.arithmetic-slices 415.add-strings 416.partition-equal-subset-sum 419.battleships-in-a-board 424.longest-repeating-character-replacement 435.non-overlapping-intervals 437.path-sum-iii 438.find-all-anagrams-in-a-string 440.k-th-smallest-in-lexicographical-order 441.arranging-coins 442.find-all-duplicates-in-an-array 445.add-two-numbers-ii 448.find-all-numbers-disappeared-in-an-array 451.sort-characters-by-frequency 452.minimum-number-of-arrows-to-burst-balloons 454.4sum-ii 455.assign-cookies 460.lfu-cache 469.convex-polygon 474.ones-and-zeroes 480.sliding-window-median 486.predict-the-winner 490.the-maze 491.increasing-subsequences 494.target-sum 496.next-greater-element-i 498.diagonal-traverse 501-600 503.next-greater-element-ii 505.the-maze-ii 513.find-bottom-left-tree-value 516.longest-palindromic-subsequence 518.coin-change-2 521.longest-uncommon-subsequence-i 530.minimum-absolute-difference-in-bst 538.convert-bst-to-greater-tree 540.single-element-in-a-sorted-array 541.reverse-string-ii 543.diameter-of-binary-tree 547.friend-circles 551.student-attendance-record-i 554.brick-wall 560.subarray-sum-equals-k 562.longest-line-of-consecutive-one-in-matrix 572.subtree-of-another-tree 581.shortest-unsorted-continuous-subarray 589.n-ary-tree-preorder-traversal 594.longest-harmonious-subsequence 600.non-negative-integers-without-consecutive-ones 601-700 621.task-scheduler 647.palindromic-substrings 654.maximum-binary-tree 673.number-of-longest-increasing-subsequence 674.longest-continuous-increasing-subsequence 680.valid-palindrome-ii 692.top-k-frequent-words 695.max-area-of-island 698.partition-to-k-equal-sum-subsets 701-800 714.best-time-to-buy-and-sell-stock-with-transaction-fee 725.split-linked-list-in-parts 727.minimum-window-subsequence 733.flood-fill 735.asteroid-collision 739.daily-temperatures 743.network-delay-time 746.min-cost-climbing-stairs 752.open-the-lock 754.reach-a-number 763.partition-labels 764.largest-plus-sign 765.couples-holding-hands 768.max-chunks-to-make-sorted-ii 769.max-chunks-to-make-sorted 778.swim-in-rising-water 783.minimum-distance-between-bst-nodes 784.letter-case-permutation 785.is-graph-bipartite 787.cheapest-flights-within-k-stops 787 791.custom-sort-string 792.number-of-matching-subsequences 793.preimage-size-of-factorial-zeroes-function 801-900 802.find-eventual-safe-states 803.bricks-falling-when-hit 807.max-increase-to-keep-city-skyline 814.binary-tree-pruning 829.consecutive-numbers-sum 832.flipping-an-image 835.image-overlap 841.keys-and-rooms 844.backspace-string-compare 845.longest-mountain-in-array 851.loud-and-rich 856.score-of-parentheses 857.minimum-cost-to-hire-k-workers 860.lemonade-change 862.shortest-subarray-with-sum-at-least-k 863.all-nodes-distance-k-in-binary-tree 868.binary-gap 876.middle-of-the-linked-list 877.stone-game 881.boats-to-save-people 885.spiral-matrix-iii 886.possible-bipartition 889.construct-binary-tree-from-preorder-and-postorder-traversal 892.surface-area-of-3d-shapes 901-1000 901.online-stock-span 907.sum-of-subarray-minimums 916.word-subsets 917.reverse-only-letters 929.unique-email-addresses 933.number-of-recent-calls 934.shortest-bridge 938.range-sum-of-bst 941.valid-mountain-array 946.validate-stack-sequences 951.flip-equivalent-binary-trees 958.check-completeness-of-a-binary-tree 959.regions-cut-by-slashes 962.maximum-width-ramp 967.numbers-with-same-consecutive-differences 978.longest-turbulent-subarray 979.distribute-coins-in-binary-tree 980.unique-paths-iii 983.minimum-cost-for-tickets 984.string-without-aaa-or-bbb 989.add-to-array-form-of-integer 1000.minimum-cost-to-merge-stones 1001-1100 1004.max-consecutive-ones-iii 1008.construct-binary-search-tree-from-preorder-traversal 1009.complement-of-base-10-integer 1013.partition-array-into-three-parts-with-equal-sum 1019.next-greater-node-in-linked-list 1024.video-stitching 1026.maximum-difference-between-node-and-ancestor 1027.longest-arithmetic-sequence 1038.binary-search-tree-to-greater-sum-tree 1046.last-stone-weight 1079.letter-tile-possibilities 1081.smallest-subsequence-of-distinct-characters 1093.statistics-from-a-large-sample 1094.car-pooling 1101-1200 1003.check-if-word-is-valid-after-substitutions 1014.best-sightseeing-pair 1109.corporate-flight-bookings 1124.longest-well-performing-interval 1129.shortest-path-with-alternating-colors 1130.minimum-cost-tree-from-leaf-values 1140.stone-game-ii 1143.longest-common-subsequence 1155.number-of-dice-rolls-with-target-sum 1162.as-far-from-land-as-possible 1163.last-substring-in-lexicographical-order 1169.invalid-transactions 1179.reformat-department-table 1180.count-substrings-with-only-one-distinct-letter 1183.maximum-number-of-ones 1184.distance-between-bus-stops 1185.day-of-the-week 1188.design-bounded-blocking-queue 1189.maximum-number-of-balloons 1190.reverse-substrings-between-each-pair-of-parentheses 1201-1300 1220.count-vowels-permutation 1221.split-a-string-in-balanced-strings 1222.queens-that-can-attack-the-king 1232.check-if-it-is-a-straight-line 1235.maximum-profit-in-job-scheduling 1240.tiling-a-rectangle-with-the-fewest-squares 1248.count-number-of-nice-subarrays 1249.minimum-remove-to-make-valid-parentheses 1254.number-of-closed-islands 1260.shift-2d-grid 1261.find-elements-in-a-contaminated-binary-tree 1262.greatest-sum-divisible-by-three 1263.minimum-moves-to-move-a-box-to-their-target-location 1266.minimum-time-visiting-all-points 1267.count-servers-that-communicate 1268.search-suggestions-system 1277.count-square-submatrices-with-all-ones 1278.palindrome-partitioning-iii 1286.iterator-for-combination 1301-1400 1319.number-of-operations-to-make-network-connected 1320.minimum-distance-to-type-a-word-using-two-fingers 1368.minimum-cost-to-make-at-least-one-valid-path-in-a-grid Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/二分.html":{"url":"chapter/二分.html","title":"二分","keywords":"","body":"二分 应用场景 70%的二分都是跟单调性有关，有单调性的题目一般都可以二分。 95%的题目存在两段性的性质。一部分满足，一部分不满足。 算法思想 将区间分为左右两边（分治），判断中点，确定答案在哪一边，每次缩小一半，直到得到最终答案。 需要注意边界问题 模板 二分模板一共有两个，分别适用于不同情况。 算法思路：假设目标值在闭区间[l, r]中， 每次将区间长度缩小一半，当l = r时，我们就找到了目标值。 版本1 当我们将区间[l, r]划分成[l, mid]和[mid + 1, r]时，其更新操作是r = mid或者l = mid + 1; 计算mid时不需要加1。 C++ 代码模板： int bsearch_1(int l, int r) { while (l > 1; if (check(mid)) r = mid; else l = mid + 1; } return l; } 版本2 当我们将区间[l, r]划分成[l, mid - 1]和[mid, r]时，其更新操作是r = mid - 1或者l = mid; 此时为了防止死循环，计算mid时需要加1。 C++ 代码模板： int bsearch_2(int l, int r) { while (l > 1; if (check(mid)) l = mid; else r = mid - 1; } return l; } 练习题 LeetCode 33. Search in Rotated Sorted Array (medium) LeetCode 34. Find First and Last Position of Element in Sorted Array (medium) LeetCode 35. Search Insert Position (easy) LeetCode 69. Sqrt(x) (easy) LeetCode 74. Search a 2D Matrix (medium) LeetCode 153. Find Minimum in Rotated Sorted Array (medium) LeetCode 154. Find Minimum in Rotated Sorted Array II (hard) LeetCode 162. Find Peak Element (medium) LeetCode 275. H-Index II (medium) LeetCode 287. Find the Duplicate Number (medium) LeetCode 315. Count of Smaller Numbers After Self (hard) LeetCode 704. Binary Search (easy) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/sort/排序.html":{"url":"chapter/sort/排序.html","title":"排序算法及应用","keywords":"","body":"排序算法 我们常说八大排序算法，实际上排序有非常多的算法，一般我们只需要掌握三种即可：冒泡、快排、归并 其中冒泡最简单，我们直接给出代码： 冒泡排序 function bubbleSort(nums) { for (let i = 0; i nums[j + 1]) { let tmp = nums[j] nums[j] = nums[j+1] nums[j+1] = tmp } } } return nums } 快速排序 和 归并排序 单独讲解 练习题目 lc912. 排序数组 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/sort/快排.html":{"url":"chapter/sort/快排.html","title":"快速排序","keywords":"","body":"快排 快排的思想：递归+分治 选择一个轴（pivot），下标i, j,通过不断移动下标、比较、交换，使得轴左边所有数据小于轴，右边所有数据大于轴； 递归进行上述过程，直到所有数列长度为0或1，排序结束； 由于每次迭代过程，至少有一个值（轴）排好序，所以最终算法会终止； function quickSort(nums) { function recursive(nums, i, j) { if (i >= j) return nums let pivot = partition(nums, i, j) recursive(nums, i, pivot - 1) recursive(nums, pivot + 1, j) return nums } function partition(nums, low, high) { let pivot = nums[low] while (low = pivot) high-- nums[low] = nums[high] while (low 不稳定排序，中间交换过程会打乱顺序 时间复杂度：最差O(N^2)，平均O(N^logN) 优化 随机轴元素 另一种写法(轴的位置可以随机)： 取中点为轴 找到左边第一个大于等于轴的元素A，找到右边第一个大于等于轴的元素B 当A的下标小于B的下标时，交换 递归上述过程 void quick_sort(int q[], int l, int r) { if (l >= r) return; int i = l - 1, j = r + 1, x = q[l + r >> 1]; while (i x); if (i 题目 Top-K问题 LeetCode215.Kth Largest Element in an Array (medium) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/sort/归并.html":{"url":"chapter/sort/归并.html","title":"归并排序","keywords":"","body":"归并 稳定排序 时间复杂度：O(N^logN) 第一种模板 int t[100001]; void mergesort(int a[], int l, int r){ if (l >= r) return; int mid = l+r>> 1; mergesort(a, l, mid), mergesort(a, mid+1, r); int i = l, j = mid+1, k= 0; while (i 第二种模板 function mergeSort(nums) { function recursive(nums, low, high) { if (low >= high) return let mid = (low + high) >> 1 recursive(nums, low, mid) recursive(nums, mid + 1, high) merge(nums, low, mid, high) return nums } function merge(nums, low, mid, high) { let temp = [] // 存储归并结果 let i = 0; // 归并结果游标 let l = low, r = mid + 1 // 左右两边起始下标 while (l 练习题目 Acwing65. 数组中的逆序对 剑指offer51. 数组中的逆序对 lc315. Count of Smaller Numbers After Self (hard) lc148. 排序链表 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/字符串处理.html":{"url":"chapter/字符串处理.html","title":"字符串处理","keywords":"","body":"字符串处理 字符串处理题目特点 难度可能不是很高，但是需要注意细节 题目 LeetCode 38. Count and Say (easy) LeetCode 49. Group Anagrams (medium) LeetCode 151. Reverse Words in a String (medium) LeetCode 165. Compare Version Numbers (medium) LeetCode 929. Unique Email Addresses (easy) LeetCode 5. Longest Palindromic Substring (medium) LeetCode 6. ZigZag Conversion (medium) LeetCode 208. Implement Trie (Prefix Tree) (medium) LeetCode 273. Integer to English Words (hard) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/DFS和回溯.html":{"url":"chapter/DFS和回溯.html","title":"DFS和回溯","keywords":"","body":"DFS & 递归 & 回溯 & 剪枝 这四种算法结合使用，可以解决几类问题 排列组合问题 棋盘搜索的问题，往往是在一个棋盘上查找最短路径、路径方案数 递归代码模板 递归即为闭包 func dfs(){ doSomeThing() dfs() doAnotherThing() } 回溯即附加条件后，递归下一状态之前，要回退上一步附加操作 func dfs(){ change() dfs() unchange() } dfs & 递归 & 回溯 & 剪枝 结合使用，代码模板 for all router { // 遍历所有路径 doCounter() // 统计结果 doCut() // 剪枝 func dfs(){ // 深搜 doSomeThing() // 搜索处理，保存当前状态等 change() // 当前棋盘变化 dfs() // 递归 unchange() // 回溯棋盘变化（恢复现场） doAnotherThing() } } 适用于解决的问题特征 深度优先搜索经常用来处理数据量非常庞大的问题 比如数独问题，用宽搜搜不完的 常用于解决树形问题 宽度优先搜索经常用来处理最短路径，或最短距离 深度搜索不一定等于递归，也可以用循环来实现 所谓回溯就是恢复初始状态（恢复现场） 如果我们的状态是整个棋盘，就需要恢复现场，如果是某一个格子，就不需要恢复现场 经典问题 引入几个简单问题，帮助大家理解概念 递归经典问题：汉诺塔 回溯经典问题：八皇后 递归经典问题：汉诺塔 三座塔A, B, C，求移动的最小次数 分三步： 把上面的n-1，从A->B; 把最下面的盘子，从A->C; 把B上的n-1，从B->A; 递归求解 function Hanoi(n){ if (n == 1) return 1 if (n == 2) return 3 return 2*Hanoi(n-1) + 1 // 可以通过递推公式得到 } 拓展： 四座塔A, B, C, D, 求移动的最小次数。 转自acwing 可以进行动态规划，递推求解 #include using namespace std; int d[21],f[21],i,j; int main() { for (i=1;i 所有递归问题都可以转化为递推求解 比如题目62.不同路径可以使用递归求路径总数，也可以用动态规划，根据状态转换方程，递推求解 我的习惯是如果方便使用递推求解，可以直接递推，如果递归更容易理解，也可以递归 递归的问题是：容易出现爆栈，而且一旦逻辑出错，定位问题的难度也要高于递推 回溯经典问题：八皇后问题 八皇后问题是讲解回溯的经典案例 参考力扣51.N皇后 题目分类 排列、组合、子集问题 组合、排列、子集 问题 可以用DFS解决 排列问题 求所有排列方案; LeetCode 46. Permutations (medium) LeetCode 47. Permutations II (medium) 组合问题 求所有组合方案; 如果存在重复，则需要排序，过滤重复位置 题目 LeetCode 39. Combination Sum (medium) LeetCode 40. Combination Sum II (medium) LeetCode 216. Combination Sum III (medium) LeetCode 93. Restore IP Addresses (medium) LeetCode 131. Palindrome Partitioning (medium) 子集问题 求所有子集 LeetCode 78. Subsets (medium) LeetCode 90. Subsets II (medium) 棋盘搜索 棋盘搜索一般配合 DFS + memorization LeetCode 351. Android Unlock Patterns (medium) LeetCode 329. Longest Increasing Path in a Matrix (hard) LeetCode 52. N-Queens II (hard) LeetCode 37. Sudoku Solver (hard) LeetCode 473. Matchsticks to Square (medium) 其他问题 LeetCode 22. Generate Parentheses (medium) LeetCode 131. Palindrome Partitioning (medium) LeetCode 306. Additive Number (medium) LeetCode 17. Letter Combinations of a Phone Number (medium) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/单调栈.html":{"url":"chapter/单调栈.html","title":"单调栈","keywords":"","body":"单调栈（单调队列） 单调栈是一种维护栈内元素递增(或递减)的栈。 常用来求解第一个小于或大于当前元素的值这类问题。 单调栈分为单调递增栈和单调递减栈，单调递增栈即栈内元素保持单调递增的栈，同理单调递减栈即栈内元素保持单调递减的栈。 单调栈里可以保存元素的值或下标 某些场景下，我们需要维护栈底，这时候栈的数据结构是不满足要求的，可能需要借助队列或双端队列实现（比如求滑动窗口最大值），即单调队列 应用场景 可以在O(N)的时间复杂度，找出每个数左右两边离它最近（或第一个）大于或小于它的解 单调递增栈用于查找两边第一个小于当前元素的值，单调递减栈用于查找两边第一个大于当前元素的值 一般数组中的单调性问题，题目中隐含第一个或离此元素最近的大于或小于元素的值，这类问题都可以考虑下，用单调栈是否可以求解 动画演示 数列7 4 9 5 3 2构建单调递减栈 代码模板 stack stk; for (int i = 0; i = A[stk.top()] stk.pop(); } stk.push(i); } 板子题 给定一个长度为N的正整数数组，输出每个数左右两边第一个比它小的数，如果不存在则输出-1。 输入: [3, 4, 2, 7, 5] 输出： 左边：[-1, 3, -1, 2, 2] 右边：[2, 2, -1, 5, -1] 解题思路 查找左右两边第一个更小的元素，使用单调递增栈 入栈时，当前元素左边的第一个更小的元素是当前栈顶元素 出栈时，栈顶右边第一个更小的元素是即将入栈的当前元素 代码实现 void sumSubarrayMins(vector &A) { int n = A.size(); vector lmin(n, -1); vector rmin(n, -1); stack stk; // 单调递增栈 for (int i = 0; i 时间复杂度O(N)，空间复杂度O(N) 题目 LeetCode 239. Sliding Window Maximum (hard) LeetCode 42. Trapping Rain Water (hard) LeetCode 84. Largest Rectangle in Histogram (hard) LeetCode 85. Maximal Rectangle (hard) LeetCode 402. Remove K Digits (medium) LeetCode 456. 132 Pattern (medium) TODO LeetCode 475. Heaters (easy) TODO LeetCode 503. Next Greater Element II (medium) LeetCode 768. Max Chunks To Make Sorted II (hard) LeetCode 739. Daily Temperatures (medium) LeetCode 901. Online Stock Span (medium) LeetCode 962. Maximum Width Ramp (medium) LeetCode 1019. Next Greater Node In Linked List (medium) LeetCode 1124. Longest Well-Performing Interval (medium) LeetCode 907. Sum of Subarray Minimums (medium) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/滑动窗口.html":{"url":"chapter/滑动窗口.html","title":"滑动窗口","keywords":"","body":"滑动窗口 算法思路 使用双指针中的左右指针技巧，初始化 left = right = 0，把索引闭区间 [left, right] 称为一个「窗口」。 先不断地增加 right 指针扩大窗口 [left, right]，直到窗口符合要求 停止增加 right，转而不断增加 left 指针缩小窗口 [left, right]，直到窗口中的字符串不再符合要求。同时，每次增加 left，我们都要更新一轮结果。 重复第 2 和第 3 步，直到 right 到达尽头。 第 2 步相当于在寻找一个「可行解」，然后第 3 步在优化这个「可行解」，最终找到最优解。 左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动。 注意: 滑动窗口适用的题目一般具有单调性 滑动窗口、双指针、单调队列和单调栈经常配合使用 代码模板 int left = 0, right = 0; // 左右指针 while (right 练习题目 LeetCode 239. Sliding Window Maximum (hard) LeetCode 480. Sliding Window Median (hard) LeetCode 3. Longest Substring Without Repeating Characters (medium) LeetCode 76. Minimum Window Substring (hard) LeetCode 395. Longest Substring with At Least K Repeating Characters (medium) LeetCode 567. Permutation in String (medium) LeetCode 438. Find All Anagrams in a String (medium) LeetCode 209. Minimum Size Subarray Sum (medium) LeetCode 424. Longest Repeating Character Replacement (medium) LeetCode 1208. Get Equal Substrings Within Budget (medium) LeetCode 904. Fruit Into Baskets (medium) LeetCode 992. Subarrays with K Different Integers (hard) LeetCode 995. Minimum Number of K Consecutive Bit Flips (hard) LeetCode 978. Longest Turbulent Subarray (medium) LeetCode 1040. Moving Stones Until Consecutive II (medium) LeetCode 1052. Grumpy Bookstore Owner (medium) LeetCode 1074. Number of Submatrices That Sum to Target (hard) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/前缀和.html":{"url":"chapter/前缀和.html","title":"前缀和","keywords":"","body":"前缀和 代码模板 一维前缀和 S[i] = a[1] + a[2] + ... a[i] a[l] + ... + a[r] = S[r] - S[l - 1] 模板题 AcWing 795. 前缀和 二维前缀和 S[i, j] = 第i行j列格子左上部分所有元素的和 以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为： S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1] —— 模板题 AcWing 796. 子矩阵的和 练习题 LeetCode 560. Subarray Sum Equals K (medium) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/链表.html":{"url":"chapter/链表.html","title":"链表","keywords":"","body":"链表 力扣上链表相关题目总结 解题技巧： 删除节点时，是否需要在开头增加辅助节点 dummpy节点 练习题目 LeetCode 19. Remove Nth Node From End of List (medium) LeetCode 237. Delete Node in a Linked List (easy) LeetCode 83. Remove Duplicates from Sorted List (easy) LeetCode 61. Rotate List (medium) LeetCode 24. Swap Nodes in Pairs (medium) LeetCode 206. Reverse Linked List (easy) LeetCode 92. Reverse Linked List II (medium) LeetCode 160. Intersection of Two Linked Lists (easy) LeetCode 142. Linked List Cycle II (medium) LeetCode 148. Sort List (medium) LeetCode 86. Partition List (medium) LeetCode 143. Reorder List (medium) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/binary-tree/二叉树.html":{"url":"chapter/binary-tree/二叉树.html","title":"二叉树","keywords":"","body":"二叉树 二叉树是一种常见的基础数据结构，以二分叉的特点得名 二叉树节点一般包含值、左节点、右节点三个属性 学习大纲 二叉树涉及到的知识点 一般 包括： 二叉树的遍历 二叉搜索树（一种特殊的二叉树） Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/binary-tree/二叉树的遍历.html":{"url":"chapter/binary-tree/二叉树的遍历.html","title":"二叉树的遍历","keywords":"","body":"二叉树的遍历 二叉树有深度优先和广度优先两种遍历方式 其中深度优先遍历（dfs）又分为前序、中序、后序三种遍历方式 可以用递归和非递归方式实现 深度优先搜索 前序遍历 中序遍历 后序遍历 宽度优先搜索 深度优先搜索模板 搜索模板 public class Solution { public void traverse(TreeNode root) { if (root == null) { return; } // do something with root traverse(root.left); // do something with root traverse(root.right); // do something with root } } 分治模板 public class Solution { public ResultType traversal(TreeNode root) { // null or leaf if (root == null) { // do something and return; } // Divide ResultType left = traversal(root.left); ResultType right = traversal(root.right); // Conquer ResultType result = Merge from left and right. return result; } } Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/binary-tree/深度优先--前序遍历.html":{"url":"chapter/binary-tree/深度优先--前序遍历.html","title":"深度优先--前序遍历","keywords":"","body":"前序遍历 遍历顺序：根左右 递归 func dfs(root){ visit(root) dfs(root.left) dfs(root.right) } 代码实现 class Solution { private: vector ans; public: vector preorderTraversal(TreeNode* root) { dfs(root); return ans; } void dfs(TreeNode* root){ if (!root) return ; ans.push_back(root->val); dfs(root->left); dfs(root->right); } }; 非递归方式 用指针p表示当前位置，用一个来栈记录访问顺序 对于每一个当前节点p，先访问p, 然后右子树入栈，然后访问左子树 栈S; p= root; while(p || S不空){ while(p){ 访问p节点； p的右子树入S; p = p的左子树; } p = S栈顶弹出; } 代码实现 class Solution { public: vector preorderTraversal(TreeNode* root) { vector ans; TreeNode* p = root; vector stk; while (p || !stk.empty()){ while (p){ ans.push_back(p->val); stk.push_back(p->right); p = p->left; } p = stk.back(); stk.pop_back(); } return ans; } }; Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/binary-tree/深度优先--中序遍历.html":{"url":"chapter/binary-tree/深度优先--中序遍历.html","title":"深度优先--中序遍历","keywords":"","body":"中序遍历 中序遍历：左根右 递归方式 func dfs(root){ dfs(root.left) visit(root) dfs(root.right) } 非递归方式 思路： 先把左子树都进栈，依次出栈，访问左子树，出栈过程把右子树都入栈， 这样访问的顺序就是 左 根 右； 用一个指针p标记当前游标，一个栈保存访问顺序 对于每一个当前节点p，先把左节点全部入栈，在出栈的过程中，依次访问根节点，右子树 栈S; p = root; while(p || S不空){ while(p){ p入S; p = p的左子树; } p = S.top 出栈; 访问p; p = p的右子树; } cpp代码实现 class Solution { public: vector inorderTraversal(TreeNode* root) { if (!root) return {}; vector stk = {}; vector ans; TreeNode* p = root; while (p || !stk.empty()){ while(p){ stk.push_back(p); p = p->left; } p = stk.back(); ans.push_back(p->val); stk.pop_back(); p = p->right; } return ans; } }; Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/binary-tree/深度优先--后序遍历.html":{"url":"chapter/binary-tree/深度优先--后序遍历.html","title":"深度优先--后序遍历","keywords":"","body":"后序遍历 递归思路 var postorderTraversal = function(root) { let ans = [] function dfs(root){ if (!root) return dfs(root.left) dfs(root.right) ans.push(root.val) } dfs(root) return ans }; 非递归思路 先得到根右左，然后逆序得到左右根 得到根右左的过程类似先序得到根左右，先把右子树访问完，把左子树压栈 栈S; p= root; while(p || S不空){ while(p){ 访问p节点； p的左子树入S; p = p的右子树; } p = S栈顶弹出; } 结果序列逆序; 代码实现： class Solution { public: vector postorderTraversal(TreeNode* root) { vector ans; vector stk; TreeNode* p = root; while (p || !stk.empty()){ while(p){ ans.push_back(p->val); stk.push_back(p->left); p = p->right; } p = stk.back(); stk.pop_back(); } reverse(ans.begin(), ans.end()); return ans; } }; Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/binary-tree/广度优先遍历.html":{"url":"chapter/binary-tree/广度优先遍历.html","title":"广度优先遍历","keywords":"","body":"广度优先遍历 也叫 层遍历，BFS 遍历过程是从上到下，一层一层的，更接近人的思维 实现方式 BFS 需要 借助 队列 来实现 应用场景 求解最短、最小路径问题 图的拓扑排序 最短路问题求解（dijkstra算法等） 优点和缺点 优点： 接近人的思维，易于理解 不会爆栈 求最短路 缺点： 代码实现较长 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/binary-tree/二叉搜索树.html":{"url":"chapter/binary-tree/二叉搜索树.html","title":"二叉搜索树","keywords":"","body":"二叉搜索树 二叉搜索树的性质 结点左子树中所含结点的值小于等于当前结点的值 结点右子树中所含结点的值大于等于当前结点的值 左子树和右子树都是二叉搜索树 判断条件 中序遍历是递增序列的二叉树一定是二叉搜索树，可以利用中序遍历是否有序判断是否二叉搜索树 根节点大于所有左子树节点，如果根节点大于左子树的最大值节点即可，因为左子树的最大值位于左子树最右边的节点，所以只要根节点 > 左子树的最右节点即可；同理，根节点 寻找左子树的最右节点（寻找右子树的最左节点） 题目 LeetCode 530. Minimum Absolute Difference in BST (easy) LeetCode 230. Kth Smallest Element in a BST (medium) LeetCode 501. Find Mode in Binary Search Tree (easy) LeetCode 938. Range Sum of BST (easy) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/字典树.html":{"url":"chapter/字典树.html","title":"字典树","keywords":"","body":"Trie树 Trie树，又称前缀树或字典树 基本性质 根节点不包含字符，除根节点以外每个节点只包含一个字符 从根节点到某一个节点，路径上经过的字符连接起来，为该节点对应的字符串 每个节点的所有子节点包含的字符串不相同 代码实现 力扣模板 struct treeNode { bool isEnd; treeNode *next[26]; treeNode() { isEnd = false; memset(next, 0, sizeof(next)); } }; class Trie { private: treeNode *root; public: Trie() { root = new treeNode(); } void insert(const string &word) { treeNode *node = root; for (char c : word) { if (node->next[c - 'a'] == NULL) { node->next[c - 'a'] = new treeNode(); } node = node->next[c - 'a']; } node->isEnd = true; } bool search(const string &word) { treeNode *node = root; for (char c : word) { node = node->next[c - 'a']; if (node == NULL) { return false; } } return node->isEnd; } bool startsWith(const string &prefix) { treeNode *node = root; for (char c : prefix) { node = node->next[c - 'a']; if (node == NULL) { return false; } } return node != NULL; } }; 应用场景 字符串检索 事先将已知的一些字符串（字典）的有关信息保存到trie树里，查找另外一些未知字符串是否出现过或者出现频率。 举例： 给出N 个单词组成的熟词表，以及一篇全用小写英文书写的文章，请你按最早出现的顺序写出所有不在熟词表中的生词。 给出一个词典，其中的单词为不良单词。单词均为小写字母。再给出一段文本，文本的每一行也由小写字母构成。判断文本中是否含有任何不良单词。例如，若rob是不良单词，那么文本problem含有不良单词。 1000万字符串，其中有些是重复的，需要把重复的全部去掉，保留没有重复的字符串。 文本预测、自动完成，see also，拼写检查 词频统计 有一个1G大小的一个文件，里面每一行是一个词，词的大小不超过16字节，内存限制大小是1M。返回频数最高的100个词。 一个文本文件，大约有一万行，每行一个词，要求统计出其中最频繁出现的前10个词，请给出思想，给出时间复杂度分析。 寻找热门查询：搜索引擎会通过日志文件把用户每次检索使用的所有检索串都记录下来，每个查询串的长度为1-255字节。假设目前有一千万个记录，这些查询串的重复度比较高，虽然总数是1千万，但是如果去除重复，不超过3百万个。一个查询串的重复度越高，说明查询它的用户越多，也就越热门。请你统计最热门的10个查询串，要求使用的内存不能超过1G。 (1) 请描述你解决这个问题的思路； (2) 请给出主要的处理流程，算法，以及算法的复杂度。 --> 若无内存限制：Trie + \"k-大/小根堆\"（k为要找到的数目）。 否则，先hash分段再对每一个段用hash（另一个hash函数）统计词频，再要么利用归并排序的某些特性（如partial_sort），要么利用某使用外存的方法。 参考 “海量数据处理之归并、堆排、前K方法的应用：一道面试题” http://www.dataguru.cn/thread-485388-1-1.html。 “算法面试题之统计词频前k大” http://blog.csdn.net/u011077606/article/details/42640867 算法导论笔记——第九章 中位数和顺序统计量 排序 Trie树是一棵多叉树，只要先序遍历整棵树，输出相应的字符串便是按字典序排序的结果。 比如给你N 个互不相同的仅由一个单词构成的英文名，让你将它们按字典序从小到大排序输出。 字符串最长公共前缀 Trie树利用多个字符串的公共前缀来节省存储空间，当我们把大量字符串存储到一棵trie树上时，我们可以快速得到某些字符串的公共前缀。 举例： 给出N 个小写英文字母串，以及Q 个询问，即询问某两个串的最长公共前缀的长度是多少？ 解决方案：首先对所有的串建立其对应的字母树。此时发现，对于两个串的最长公共前缀的长度即它们所在结点的公共祖先个数，于是，问题就转化为了离线（Offline）的最近公共祖先（Least Common Ancestor，简称LCA）问题。 而最近公共祖先问题同样是一个经典问题，可以用下面几种方法： 利用并查集（Disjoint Set），可以采用采用经典的Tarjan 算法； 求出字母树的欧拉序列（Euler Sequence ）后，就可以转为经典的最小值查询（Range Minimum Query，简称RMQ）问题了； 字符串搜索的前缀匹配 trie树常用于搜索提示。如当输入一个网址，可以自动搜索出可能的选择。当没有完全匹配的搜索结果，可以返回前缀最相似的可能。 Trie树检索的时间复杂度可以做到n，n是要检索单词的长度， 如果使用暴力检索，需要指数级O(n2)的时间复杂度。 作为其他数据结构和算法的辅助结构 如后缀树，AC自动机等 后缀树可以用于全文搜索 相关题目 力扣208. 实现 Trie (前缀树) 力扣211. 添加与搜索单词 - 数据结构设计 力扣212. 单词搜索 II 力扣1268. 搜索推荐系统 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-12 12:07:21 "},"chapter/greedy/贪心.html":{"url":"chapter/greedy/贪心.html","title":"贪心","keywords":"","body":"贪心 每次都求最优解，以局部最优得到全局最优 贪心是动态规划的一种特殊类型的题目 概念题 找零钱：有1，2，5三种面值的钞票，每件商品售价3元，输入顾客付款的钞票面额顺序，问能否找零？ 算法思路：优先找较大面值的钱 题目来源 力扣860. 柠檬水找零 常见问题 区间问题 区间问题 跳跃游戏 LeetCode 55. Jump Game (medium) LeetCode 45. Jump Game II (hard) LeetCode 1306. Jump Game III (medium) LeetCode 1345. Jump Game IV (hard) LeetCode 1340. Jump Game V (hard) 具有单调性的集合选择 LeetCode 857. Minimum Cost to Hire K Workers (hard) 180场周赛 最大的团队表现值 TODO 最大的团队表现值 贪心 将所有工人按效率从大到小排序 优先队列 S集合 维护K个工人组成组成的 表现最好的团队，优先队列按速度从小到大排序 枚举 所有工人 当S集合元素数量小于K时，直接加入集合 当S集合元素数量大于等于K时，比较当前工人和S集合堆顶的工人的速度大小 如果当前工人较慢，直接pass 如果当前工人较快，计算堆顶替换成当前工人，是否能够获得更好的表现 时间复杂度 对所有工人排序 O(nlogn) 枚举每个工人，与堆顶比较 O(nlogK) 总体时间复杂度 O(nlogn) C++ 代码 bool cmp(vector &n1, vector &n2){ return n1[1] > n2[1]; } class Solution { public: const int mod = 1e9 + 7; int maxPerformance(int n, vector& speed, vector& efficiency, int k) { vector> workers; for (int i =0; i, greater> q; for (auto &w: workers){ if (q.size() 其他问题 LeetCode 455. Assign Cookies (easy) LeetCode 392. Is Subsequence (easy) LeetCode 376. Wiggle Subsequence (medium) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/greedy/区间问题.html":{"url":"chapter/greedy/区间问题.html","title":"区间问题","keywords":"","body":"区间问题 区间问题是贪心中常见的一类问题 常用扫描线算法（sweep-line）去解决 一般需要先对其起始位置信息进行排序，然后考虑区间的起始位置如何处理，得到最优解 解决区间问题的通用思路 将每个区间按左端点（或者右端点）进行排序 从前往后依次枚举每个区间，贪心策略计算结果 四类区间问题 题目来源 AcWing 905. 区间选点273人打卡 AcWing 908. 最大不相交区间数量258人打卡 AcWing 906. 区间分组220人打卡 AcWing 907. 区间覆盖212人 区间选点 给定N个闭区间[ai,bi]，请你在数轴上选择尽量少的点，使得每个区间内至少包含一个选出的点。 输出选择的点的最小数量。 位于区间端点上的点也算作区间内。 实际问题：用最少的箭射爆所有气球 算法思路： 将所有区间按照右端点从小到大排序 从前往后枚举每个区间 如果当前区间已经包含点，直接pass 否则结果加一，选择当前区间的右端点，继续枚举后面的区间 最多不想交区间 给定N个闭区间，选择若干区间，使得选中的区间之间互不相交（包括端点）。 输出可选取区间的最大数量。 实际问题：很多课程，或者活动，我们从中选择最多数量的课程或活动参加 算法思路：跟区间选点一致 区间分组 给定N个闭区间，将这些区间分成若干组，使得每组内部的区间两两之间（包括端点）没有交集，并使得组数尽可能小。 输出最小组数。 实际问题：公司今天有20场会议，问最少用几个会议室可以安排下 算法思路： 将所有区间按照左端点从小到大排序 从前往后处理每个区间 判断能否将其放到某个现有的组中（小顶堆维护右端点（最早结束的区间）） 区间覆盖 给定N个闭区间[ai,bi]以及一个线段区间[s,t]，请你选择尽量少的区间，将指定线段区间完全覆盖。 输出最少区间数，如果无法完全覆盖则输出-1。 算法思路： 将所有区间按左端点从小到大排序 从前往后依次枚举每个区间，在所有能覆盖start的区间中选择右端点最大的，然后将start更新成右端点的最大值 题目 LeetCode 452. Minimum Number of Arrows to Burst Balloons (medium) LeetCode 253. Meeting Rooms II (medium) LeetCode 218. The Skyline Problem (hard) LeetCode 1235. Maximum Profit in Job Scheduling (hard) 领扣 391. 数飞机 给出飞机起飞，降落时间，求天上最多有多少架飞机 扫描线算法：记录 扫描线坐标（起飞降落时间点），记录起飞降落动作，用差分数组的思想，起飞 +1，降落 -1，求最大值 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/dp/动态规划.html":{"url":"chapter/dp/动态规划.html","title":"动态规划","keywords":"","body":"动态规划 动态规划（Dynamic Programming）是一种分阶段求解策略问题的数学思想。 动态规划中包含三个重要概念：最优子结构、边界、状态转移公式。 最优子结构，求解一个问题时，首先要找出问题的最优子结构； 边界，边界是最简的最优子结构，无需再简化便可得到结果；如果一个问题没有边界，将无法得到有限的结果； 状态转换方程，是阶段与阶段直接的转换关系 动态规划类似于高中数学的数学归纳法 求解过程 确定状态 研究最优策略的最后一步，转化为子问题，定义最优子结构 转换方式 根据子问题定义和最后一步求解过程，抽象出状态转换方程 初始条件和边界情况 细心，考虑周全 计算顺序 利用之前的计算结果 动态规划题目特点 计数 有多少种方式走到右下角 有多少种方法选出k个数使得和为sum 求最值 从左上角走到右下角路径的最大数字和 求最长上升子序列的长度 求存在性 青蛙过河，能否跳到最后一个位置 取石子游戏，先手是否必胜 能不能选出k个数使得和是sum 常见动态规划类型 坐标型动态规划(20%) 重点 序列型动态规划(20%) 重点 划分型动态规划(20%) 重点 区间型动态规划(15%) 重点 背包型动态规划(10%) 双序列型动态规划(5%) 博弈型动态规划(5%) 综合性动态规划(5%) 位操作型动态规划 状态压缩DP 动态规划题型较多，需要思考 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/dp/坐标型动态规划.html":{"url":"chapter/dp/坐标型动态规划.html","title":"坐标型动态规划","keywords":"","body":"坐标型动态规划 坐标记录状态 可以用滚动数组进行空间优化 题目 硬币组合（一维坐标） 518.Coin Change 2 (medium) 足够的2，5，7面值的硬币，问最少用多少个硬币能组合出面值27（有多少种方式凑出面值27） (力扣518零钱兑换II) f(i) 表示凑出i元所有的最少硬币数（凑出i元的方案数） 不同路径（二维坐标） LeetCode64.Minimum Path Sum (medium) 机器人从左上角走到右下角，有多少种走法 炸弹袭击(领扣553) 二维矩阵中的格子为空，敌人，墙，炸弹可以放在任意空地上，炸弹会杀死同一行和同一列没有墙阻隔的敌人；问一个炸弹杀死的最大敌人数 最长序列（属于坐标型动态规划） 最长上升子序列(LIS)（力扣300）一维 LeetCode300.Longest Increasing Subsequence (medium) 最长公共子序列(LCS)（力扣1143）二维 LeetCode1143.Longest Common Subsequence (medium) 矩形统计 LeetCode 221. Maximal Square (medium) LeetCode 1277. Count Square Submatrices with All Ones (medium) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/dp/序列型动态规划.html":{"url":"chapter/dp/序列型动态规划.html","title":"序列型动态规划","keywords":"","body":"序列型动态规划 f[0] 往往表示空序列 有时候会有K维序列，表示K种状态 房子涂色 k种颜色，费用不一样，相邻房子颜色不能相同，求最小花费 打家劫舍 198.House Robber (easy) 213.House Robber II (medium) 337.House Robber III (medium) 六道股票问题 121.Best Time to Buy and Sell Stock (easy) 122.Best Time to Buy and Sell Stock II (easy) 123.Best Time to Buy and Sell Stock III (hard) 188.Best Time to Buy and Sell Stock IV (hard) 309.Best Time to Buy and Sell Stock with Cooldown (medium) 714.Best Time to Buy and Sell Stock with Transaction Fee (medium) 俄罗斯套娃 354.Russian Doll Envelopes (hard) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/dp/划分型动态规划.html":{"url":"chapter/dp/划分型动态规划.html","title":"划分型动态规划","keywords":"","body":"划分型动态规划 给定长度为N的序列，要求划分为若干段 段数不限，或指定K段 每一段满足一定的性质（最小代价，能不能等） 做法： 类似于序列型动态规划，但是通常要加上段数信息 一般用f[i + 1][k]来记录前i个元素（元素0~i-1,f[0][k]表示空序列）分成k段的性质，如最小代价 关注最后一段，枚举最后一段可能情况 + 前面序列, 求最优策略 注意：划分型动态规划每一段序列一定是连续的 数字规律一类题目（一维坐标） 把一个完整的数字分成几个，满足一定的性质 LeetCode 279. Perfect Squares (medium) LeetCode 343. Integer Break (medium) 此类问题往往也可以用完全背包模型去解决 解码方法 LeetCode 91. Decode Ways (medium) 分割回文串 LeetCode 132. Palindrome Partitioning II (hard) LeetCode 1278. Palindrome Partitioning III (hard) 抄写书籍（领扣437） N本书，每本有A[i]页；K个抄写员，每个抄写员可以抄连续的几本书；抄写员抄写速度一样；问最少需要多长时间抄写完毕。 可以用贪心，动态规划更通用，如果稍微变形，贪心就不可以用了 LeetCode 410. Split Array Largest Sum (hard) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/dp/区间型动态规划.html":{"url":"chapter/dp/区间型动态规划.html","title":"区间型动态规划","keywords":"","body":"区间型动态规划 一般用二维数组表示区间 区间问题只需要考虑 区间头和区间尾 区间型动态规划一般都是hard难度，不过掌握规律，其实也不难 题目 LeetCode 516. Longest Palindromic Subsequence (medium) LeetCode 877. Stone Game (medium) LeetCode 87. Scramble String (hard) LeetCode 312. Burst Balloons (hard) LeetCode 546. Remove Boxes (hard) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/dp/背包型动态规划.html":{"url":"chapter/dp/背包型动态规划.html","title":"背包型动态规划","keywords":"","body":"背包问题 对于背包问题的学习，推荐看下dd大牛的《背包九讲》 背包问题是一类动态规划问题 背包问题分类 01背包问题 每件物品最多用1次 完全背包问题 每件物品有无限个 多重背包问题 每种物品有Si个 分组背包问题 一组里面只能选一种 混合背包问题 二维费用的背包问题 背包问题求方案数 求背包问题的方案 有依赖的背包问题 重点掌握：01背包、完全背包、多重背包、分组背包 01背包问题 有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。 第 i 件物品的体积是 vi，价值是 wi。 求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。 输出最大价值。 输入： N 件物品 V 容量 v[N] 体积 w[N] 价值 01背包是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。 一维数组解决01背包 dp[j]表示体积为j能放下的最大价值 板子代码 function maxValue(N, V, v, w) { let dp = new Array(V + 1).fill(0) for (let i = 0; i = v[i]; j--) { // 循环体积；从大到小； dp[j] = Math.max(dp[j], dp[j - v[i]] + w[i]) } } return dp[V] } 只用一维数组解01背包问题是十分必要的。 题目 LeetCode 300. Longest Increasing Subsequence (medium) LeetCode 416. Partition Equal Subset Sum (medium) 总结 01背包问题是最基本的背包问题，它包含了背包问题中设计状态、方程的最基本思想， 另外，别的类型的背包问题往往也可以转换成01背包问题求解。 故一定要仔细体会上面基本思路的得出方法，状态转移方程的意义，以及最后怎样优化的空间复杂度。 完全背包问题 有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。 第 i 种物品的体积是 vi，价值是 wi。 求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。 输出最大价值。 dp[i]表示总体积为i的情况下的最大价值 板子 function maxValue(N, V, v, w) { let dp = new Array(V + 1).fill(0) for (let i = 0; i 多重背包问题 有 N 种物品和一个容量是 V 的背包。 第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。 求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。 输出最大价值。 输入样例 4 5 1 2 3 2 4 1 3 4 3 4 5 2 输出样例： 10 数据范围 0 f[i] 表示总体积是i的情况下的最大价值； #include using namespace std; const int N = 110; int n, m; int f[N]; int main(){ cin >> n >> m; for (int i = 0; i> v >> w >> s; for (int j = m; j >= 0; j--){ for (int k =1; k 多重背包的二进制优化 数据范围 0 如果上面数据范围仍按照三维循环去求解，时间复杂度将会达到2e9，会TLE 优化方法：通过把物品件数拆为二进制份，转化为01背包问题求解 二进制拆分算法：比如10个物品，我们可以拆成 1，2，4 和 3（10-1-2-4得到） 1，2，4，3可以组合得到1到10的所有数字，如何证明 证明：s分为两部分 1,2, 4, 8,...,2^k 和 s - 2^k,前半部分，我们可以通过二进制表示证明1到2^k都可取，剩下部分 s - 2^k的取值范围在[0,2^k)之间，我们可以想象把后半部分移到前面，前半部分移到后面，可以得到后半部分的任意取值也都可以得到 #include using namespace std; const int N = 2010; int n, m; int f[N] = {0}; struct Good { int v, w; }; int main(){ cin >> n >> m; vector goods; for (int i = 0; i> v >> w >> s; for (int k = 1; k 0) goods.push_back({v*s, w*s}); } for (auto good: goods){ for (int j = m; j >= good.v; j--){ f[j] = max(f[j], f[j - good.v] + good.w); } } cout 多重背包的单调队列优化 楼教主--男人八题 https://www.cnblogs.com/dramstadt/p/3439725.html 分组背包问题 混合背包问题 二维费用的背包问题 背包问题求方案数 有1分，2分，5分，10分四种硬币，每种硬币数量无限，给定n分钱(n 输入描述: 输入整数n.(1 输出描述: 输出组合数，答案对1e9+7取模。 输入例子1: 13 输出例子1: 16 求背包问题的方案 有依赖的背包问题 N个物品，有重量数组w,和价值数组v,背包承重为M 求背包能装的最大重量（领扣92） 求背包能装的最大价值 (领扣125) 01背包问题，从最大体积向0体积枚举； 完全背包问题，从0体积向最大体积枚举； 题目 300.Longest Increasing Subsequence (medium) 322.Coin Change (medium) 474.Ones and Zeroes (medium) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/dp/双序列型动态规划.html":{"url":"chapter/dp/双序列型动态规划.html","title":"双序列型动态规划","keywords":"","body":"双序列型动态规划 题目 LeetCode 1143. Longest Common Subsequence (medium) LeetCode 97. Interleaving String (hard) LeetCode 72. Edit Distance (hard) LeetCode 115. Distinct Subsequences (hard) LeetCode 10. Regular Expression Matching (hard) LeetCode 44. Wildcard Matching (hard) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/dp/博弈型动态规划.html":{"url":"chapter/dp/博弈型动态规划.html","title":"博弈型动态规划","keywords":"","body":"博弈型动态规划 博弈型动态规划跟其他类型动态规划不同：博弈型往往从第一步开始分析 石子游戏 一个数字序列，两名玩家，两人依次从左右两个端点取，两人都会做出最佳选择 输出第一位玩家是否会取的胜利 题目来源： LeetCode 486. Predict the Winner (medium) LeetCode 877. Stone Game (medium) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/dp/位操作型动态规划.html":{"url":"chapter/dp/位操作型动态规划.html","title":"位操作型动态规划","keywords":"","body":"Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/dp/数位dp.html":{"url":"chapter/dp/数位dp.html","title":"数位dp","keywords":"","body":"数位dp 数位dp用来处理计数问题 程序员面试金典；面试题 17.06. 2出现的次数 acwing 338. 计数问题 hdu2089.不要62 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/dp/状态压缩dp.html":{"url":"chapter/dp/状态压缩dp.html","title":"状态压缩dp","keywords":"","body":"状态压缩DP（了解） AcWing 91. 最短Hamilton路径（最短哈密顿距离） 1349.Maximum Students Taking Exam (hard) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/并查集.html":{"url":"chapter/并查集.html","title":"并查集","keywords":"","body":"概念 并查集(Union-Find Set)，也称为不相交集数据结构（Disjointed Set Data Structure）， 指一系不相交的集合(Sets)，提供合并（Union）和查找(Find)两种操作。 总结：一种用来 解决集合查询合并 的数据结构，支持 近乎O(1)的find操作 和 近乎O(1)的union操作 两个基本操作 find(int i) 判断是否属于同一集合 find(i)即查找I所归属的集合，通常我们使用find(i)和find(j)判断i和j是否连通，即是否属于同一个集合 union(int i , int j) 将两个集合进行合并 顾名思义，union方法即将I和J所在的两个集合连通起来，执行这个方法后，I所在集合和所有元素和J所在集合的所有元素都连通 可以解决的问题（适用场景） 有N个点，用M条线进行两两相连的操作（相连即为合并操作） 问A点和B点是否连通 判断 find(A) == find(B) 问连通块的总个数 for i:0~n cnt+= i != find(i) 问A点所在连通块的节点个数 for i:0~n; find(A) == find(i) && cnt++ 判断是否存在环路 进行合并操作时，先判断是否连通，如果已经连通，则存在环路，此时进行合并会死循环 代码模板 初始化 for (int i = 0; i 查找find int find(int x) { if (p[x] == x) return x; return p[x] = find(p[x]); // 带路径压缩 } 合并Union 老大哥之间合并，跟小弟没关系 void unionA(int a, int b){ p[find(a)] = find(b); } 完整版代码 int f[N]; for (int i = 0; i 带rank的路径压缩实现（了解） class Solution { public: void makeSet(int n){ vector p(n, 0); for (int i = 0; i rank(n, 0); } int find(vector &p, int x) { if (p[x] != x) { p[x] = find(p, p[x]); //路径压缩 } return p[x]; } void unionSet(vector &p, vector &rank, int x, int y) { x = find(p, x); y = find(p, y); if (rank[x] 题目 LeetCode 547. Friend Circles (medium) LeetCode 803. Bricks Falling When Hit (hard) LeetCode 1319. Number of Operations to Make Network Connected (medium) LeetCode 765. Couples Holding Hands (hard) LeetCode 684. Redundant Connection (medium) 岛屿问题 LeetCode 200. Number of Islands (medium) LeetCode 695. Max Area of Island (medium) 拓展阅读 算法导论-第21章:用于不想交集合的数据结构 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/位运算.html":{"url":"chapter/位运算.html","title":"位运算","keywords":"","body":"位运算 六种基本运算 与 a & b 或 a | b 取反 ~a 异或 a ^ b 左移 右移 >> 技巧型运算 x & -x lowbits运算: lowbit(x) = x & -x 应用: 得到x的二进制表示中最右边的一个1 推导: 负数 = 正数的补码 + 1 模拟加法 a ^ b相当于 a 与 b 的二进制的不进位相加 配合移位操作可以实现加法操作 模拟乘以2的幂 x 模拟除以2的幂 x >> k 相当于 x / 2的k次幂 比如：我们在使用二分算法时，获取mid，可以 使用 mid = l + (r - l) >> 1 模拟整除判断 (x & m) == 0 相当于 x % (m + 1) == 0 我们常用 x & 1 == 0 来判断 x是否是偶数就是利用此条性质 举例：(x & 3) == 0 相当于 x % 4 == 0 异或运算交换两个元素 a = a ^ b b = a ^ b a = a ^ b 将第k位置为1(k从0开始) x |= (1 将第k位置为0 x &= ~(1 判断第k位是不是1 (x >> i) & 1 或者 x & (1 删除最后一位的1 x & (x-1) x ^ (x & -x) 练习题目 只出现一次的数字 LeetCode 136. Single Number (easy) 异或运算求解 LeetCode 137. Single Number II (medium) 三进制思路 +状态机 LeetCode 260. Single Number III (medium) 低位运算 LeetCode 201. Bitwise AND of Numbers Range (medium) LeetCode 231. Power of Two (easy) LeetCode 371. Sum of Two Integers (easy) LeetCode 405. Convert a Number to Hexadecimal (easy) LeetCode 421. Maximum XOR of Two Numbers in an Array (medium) LeetCode 476. Number Complement (easy) LeetCode 477. Total Hamming Distance (medium) LeetCode 762. Prime Number of Set Bits in Binary Representation (easy) LeetCode 1009. Complement of Base 10 Integer (easy) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/graph/图.html":{"url":"chapter/graph/图.html","title":"图论","keywords":"","body":"图论 图论主要掌握dfs、bfs、flood fill、拓扑排序、二分图、最短路、最小生成树等算法 图论的题目重点考察建图 记忆算法的思路，而不是代码 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/graph/图的遍历.html":{"url":"chapter/graph/图的遍历.html","title":"图的遍历","keywords":"","body":"DFS和BFS 对比DFS和BFS BFS 空间是指数级别的，大 不会有爆栈风险 可以求最短，最小 DFS 空间和深度成正比，小！ 有爆栈的风险，比如深度最坏可能有1e5层，会爆栈（C++一般4M）；层信息都放在栈空间里 不能搜最短、最小 注意事项 判断当前节点、层是否已得到最终解 判断是否可以剪枝 防止循环遍历问题（比如存在环路，要退出） 遍历顺序如何选择（比如是弧头到弧尾还是弧尾到弧头） 题目列表 flood fill算法 LeetCode 733. Flood Fill (easy) flood fill算法, dfs和bfs两种实现 LeetCode 200. Number of Islands（medium） flood fill算法 并查集 LeetCode 111. Minimum Depth of Binary Tree（easy） LeetCode 279. Perfect Squares (medium) LeetCode 130. Surrounded Regions （medium） LeetCode 543. Diameter of Binary Tree LeetCode 127. Word Ladder LeetCode 542. 01 Matrix LeetCode 695. Max Area of Island LeetCode 886. Possible Bipartition（medium） 二分图判定 851. Loud and Rich (medium) 994. Rotting Oranges（easy) LeetCode 980. Unique Paths III (hard) LeetCode 1254. Number of Closed Islands（medium） 拓扑排序相关 拓扑排序，将AOV网转化成线性序列 应用场景：判断一个图中有没有环 & 图中每一个点是否在环里； LeetCode 207. Course Schedule LeetCode 210. Course Schedule II LeetCode 802. Find Eventual Safe States (medium) 劳动监察大队 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-14 09:51:10 "},"chapter/graph/拓扑排序.html":{"url":"chapter/graph/拓扑排序.html","title":"拓扑排序","keywords":"","body":"拓扑排序 应用场景 拓扑排序的一个重要应用：判断AOV网中是否存在环。对有向图构造拓扑排序，如果所有顶点都在它的拓扑序列中，则该AOV网必定不存在环。 算法过程 在图中找到一个入度为0的点，加入到维护的结果队列 对图进行拆点操作，拆掉这个点和所有相连的边 重复上面的两步，所有点都已拆除（拓扑序列中已经包含所有点） 拓扑排序实际上是BFS的一种特殊情况，每次加入队列的点是入度为0的点，加入队列后拆掉相邻的边；记录已经拆掉的点 练习题目 LeetCode207.Course Schedule (medium) LeetCode210.Course Schedule II (medium) LeetCode802.Find Eventual Safe States (medium) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/graph/朴素的Dijkstra算法.html":{"url":"chapter/graph/朴素的Dijkstra算法.html","title":"朴素的Dijkstra算法","keywords":"","body":"朴素的Dijkstra算法 集合S：当前已经确定最短距离的点 dist[1] = 0, dist[i] = 正无穷 for v: 1 ~ n t s 用t更新其他点的距离 朴素的Dijkstra算法往往是稠密图，用邻接矩阵来存储 算法模板 int g[N][N]; // 存储每条边；为稠密阵所以用邻接矩阵存储 int dist[N]; // 存储1号点到每个点的最短距离 bool st[N]; // 存储每个点的最短路是否已经确定 // 求1号点到n号点的最短路，如果不存在则返回-1 int dijkstra() { memset(dist, 0x3f, sizeof dist); //初始化距离 0x3f代表无限大 dist[1] = 0; //第一个点到自身的距离为0 for (int i = 0; i dist[j])) t = j; st[t] = true; // t号点的最短路已经确定 // 用t更新其他点的距离 for (int j = 1; j 时间复杂是 O(n2+m), n 表示点数，m 表示边数 题目 AcWing849. Dijkstra求最短路 I LeetCode743.Network Delay Time (medium) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/graph/二分图.html":{"url":"chapter/graph/二分图.html","title":"二分图","keywords":"","body":"二分图 一个图是二分图，当且仅当图中不含有奇数环 反之，如果图中不含有奇数环，则一定是二分图 染色法 染色法是判断二分图最常用的方法，当且仅当所有节点被染色，且没有冲突发生，证明该图是二分图 题目 LeetCode 785. Is Graph Bipartite? (medium) LeetCode 886. Possible Bipartition (medium) 851. Loud and Rich (medium) 994. Rotting Oranges（easy) LeetCode 980. Unique Paths III (hard) LeetCode 1254. Number of Closed Islands（medium） Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/math/数论.html":{"url":"chapter/math/数论.html","title":"数论","keywords":"","body":"数学知识 质数 约数 欧拉函数 快速幂 扩展欧几里得算法 中国剩余定理（CRT) 高斯消元 组合计数 容斥原理 简单博弈论 拓展： 费马小定理 欧拉定理 欧拉降幂公式 威尔逊定理 扩展CRT 质数 试除法判定质数 bool is_prime(int x) { if (x 时间复杂度 O(根号n) AcWing 866. 试除法判定质数 试除法分解质因数 void divide(int x){ for (int i = 2; i 1) printf(\"%d %d\\n\", x, 1); // 输出 剩下的最后一个质因子 } AcWing 867. 分解质因数 筛质数 bool st[N]; // 是否被筛掉； true: 不是质数，被筛掉了 int primes[N], cnt = 0; // primes[]存储所有素数; cnt：当前下标 //朴素筛法-O(nlogn) void get_primes(int x) { for(int i = 2; i AcWing 868. 筛质数 LeetCode 204. Count Primes (easy) 约数 试除法求约数 vector get_divisors(int x) { vector res; for (int i = 1; i 约数个数 和 约数之和 如果 N = p1^c1 * p2^c2 * ... *pk^ck // pi为质因子，ci为质因子的幂 约数个数： (c1 + 1) * (c2 + 1) * ... * (ck + 1) // 每个质因子有 ci + 1种取法（取0~ci次） 约数之和： (p1^0 + p1^1 + ... + p1^c1) * ... * (pk^0 + pk^1 + ... + pk^ck) // 直接因式分解证明 最大公约数 欧几里得算法 int gcd(int a, int b) { return b ? gcd(b, a % b) : a; } 欧拉函数 欧拉函数可以用容斥原理证明 快速幂 求 a 的 k 次方 mod p的结果 (1 原理：平方取模，把k进行二进制拆解，二进制移位运算 时间复杂度 O(logK) int qmi(int a, int k, int p){ LL res = 1; while (k){ if (k & 1) res = (LL)res * a % p; a = (LL)a * a % p; k >>= 1; } return res; } 扩展欧几里得算法 裴（pei）蜀定理 对于任意一对正整数a,b,一定存在x,y, 使得 ax + by = (a, b) (a, b)表示 gcd(a,b)的倍数 => ax + by 能凑出的最小正整数 就是 gcd(a, b) 扩展欧几里得算法 求x, y，使得ax + by = gcd(a, b) int exgcd(int a, int b, int &x, int &y) { if (!b) { x = 1; y = 0; return a; } int d = exgcd(b, a % b, y, x); y -= (a/b) * x; return d; } 应用: 求解线性同余方程 练习: Leetcode 365. 水壶问题 中国剩余定理 高斯消元 组合计数 容斥原理 简单博弈论 容斥原理 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/math/抽屉原理.html":{"url":"chapter/math/抽屉原理.html","title":"抽屉原理","keywords":"","body":"抽屉原理 练习题目 剑指offer13. 找出数组中重复的数字 LeetCode 442. Find All Duplicates in an Array (medium) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/离散化.html":{"url":"chapter/离散化.html","title":"离散化","keywords":"","body":"离散化 总共的数据范围很大，但是用的数据量很小，也就是用到的数据在整个区间中很稀疏，这时候用到离散化 算法思想 将所有用到过的数映射到从1开始的自然数1,2,3,...,n，从而减小数据范围 算法步骤： 存储所有待离散化的值，排序并去重 查找某个值在离散化后的数组中的下标时，用二分，复杂度O(logK) 板子 vector alls; // 存储所有待离散化的值 sort(alls.begin(), alls.end()); // 将所有值排序 alls.erase(unique(alls.begin(), alls.end()), alls.end()); // 去掉重复元素 // 二分求出x对应的离散化的值 int find(int x) // 找到第一个大于等于x的位置 { int l = 0, r = alls.size() - 1; while (l > 1; if (alls[mid] >= x) r = mid; else l = mid + 1; } return r + 1; // 映射到1, 2, ...n } 板子题 AcWing 802. 区间和 # include using namespace std; typedef pair PII; int n, m; const int N = 300010; int A[N] = {0}; // 存储数组 int S[N] = {0}; // 前缀和数组 vector alls; vector adds; vector querys; int find(int x){ int l = 0, r = alls.size() -1; while (l > 1; if (alls[mid] >= x) r = mid;// 找到第一个大于等于x的元素位置 else l = mid + 1; } return l + 1; } int main(){ cin >> n >> m; while (n--){ int x, val; cin >> x >> val; adds.push_back({x, val}); alls.push_back(x); } while (m--){ int l, r; cin >> l>> r; querys.push_back({l, r}); alls.push_back(l); alls.push_back(r); } // 离散化 sort(alls.begin(), alls.end()); alls.erase(unique(alls.begin(), alls.end()), alls.end()); // 处理添加 for (auto add: adds){ A[find(add.first)] += add.second; } // 处理前缀和 for( int i = 1; i 题目 兼职规划找工作 LeetCode 1235. Maximum Profit in Job Scheduling (hard) Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/树状数组.html":{"url":"chapter/树状数组.html","title":"树状数组","keywords":"","body":"树状数组 区间求和可以使用前缀和去解，时间复杂度O(1) 但是如果元素可变呢？ 树状数组适用于 带更新操作 的 区间和查询 结构 代码实现 单点修改，区间查询 基础版本 由A数组建立C数组 int n = A.size(); vector C(n+1, 0); for (int i = 1; i 单点修改 void add(int x, int k){ for (;x 区间查询[1,x],位置0为空 int ask(int x) { int ans = 0; for (; x >0; x-=x&-x) ans +=t[x]; return ans; } 单点修改：add(x, k); 区间查询：ask(r) - ask(l - 1); 完整版代码 class Solution { public: vector t; int n; void build(vector &nums) { // 建树 n = nums.size(); t = vector(n + 1, 0); for (int i = 1; i 0; x -= x & -x) ans += t[x]; return ans; } }; 树状数组时间复杂度 预处理：O(nlog n) 更新和查询：O(log n) 区间修改，单点查询 使用差分，维护差分数组d[i] = a[i] - a[i - 1]。 区间更新变成了[l, r] 两端l和r的更新，点查询也就变成了[1, x]的区间更新。 区间修改，区间查询 使用差分，维护差分数组d1[i] = a[i] - a[i - 1] 和 d2[i] = i (d2[i] - d2[i - 1])。 区间更新的方式和2相同，区间查询是(r + 1) query(d1, r) - query(d2, r)。通过差分推一推就能得到。 当遇到单点更新时，树状数组往往比线段树更实用 树状数组和线段树比较 树状数组功能比线段树少，实现简单，常数小 树状数组通常只能用于区间求和 线段树能够应用于更多场景，包括：处理区间最大值/最小值等一系列问题 线段树实现较复杂，代码长一些 练习题 LeetCode 307. Range Sum Query - Mutable (medium) poj2352 二维偏序 bzoj1452 bzoj1878 bzoj2743 cf755d Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/线段树.html":{"url":"chapter/线段树.html","title":"线段树","keywords":"","body":"线段树 线段树用于解决 RMQ(Range Minimum/Maximum Query) 问题，即区间最值问题 比如在对数时间内从数组中找到最小值、最大值、总和、最大公约数、最小公倍数等。 相关问题： 一个数组，求任意一个区间的最大的数是多少 一个数组，求任意一个区间的和为多少 修改某个元素后，如何支持上述查询 线段树：O(NlogN)预处理，单词询问O(logN) ST表：O(NlogN)预处理，单词询问O(1) 线段树求区间和 const int N = 1e5 + 1; int tree[N] = {0}; int arr[N] = {0}; void build_tree(int node, int start, int end) { // 构建[start, end]区间 if (start == end) { tree[node] = arr[start]; return; } int mid = start + end >> 1; int left_node = 2 * node + 1; int right_node = 2 * node + 2; build_tree(left_node, start, mid); build_tree(right_node, mid + 1, end); tree[node] = tree[left_node] + tree[right_node]; } void update_tree(int node, int start, int end, int idx, int val) { // 更新 idx 的值 if (start == end) { arr[idx] = val; tree[node] = val; return; } int mid = start + end >> 1; int left_node = 2 * node + 1; int right_node = 2 * node + 2; if (idx >= start && idx end) return 0; // 区间外 if (L > 1; int left_node = 2 * node + 1; int right_node = 2 * node + 2; int val_left = query(left_node, start, mid, L, R); int val_right = query(right_node, mid + 1, end, L, R); return val_left + val_right; } int main() { int n = 6; for (int i = 0; i 课程讲解 https://www.bilibili.com/video/av47331849 https://www.acwing.com/blog/content/514/ 习题练习 LeetCode 315. Count of Smaller Numbers After Self (hard) LeetCode 327. Count of Range Sum (hard) 剑指offer 51.求数组中逆序对的个数 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"chapter/ST表.html":{"url":"chapter/ST表.html","title":"ST表","keywords":"","body":"ST表 ST表（Sparse Table) 解决静态RMQ（Range Minimum/Maxium Query，区间最值查询）问题的数据结构 板子 #include using namespace std; #define IO ios::sync_with_stdio(false);cin.tie(0); const int maxn = 1e5 + 5; const int lgn = 19; int n, q; int lg[maxn], f[maxn][19]; void init() { // log函数预处理 lg[1] = 0, lg[2] = 1; for (int i = 3; i > 1] + 1; } } void st() { for (int j = 1; j > n; for (int i = 0; i > f[i][0]; st(); cin >> q; while (q--) { int a, b; cin >> a >> b; cout 扩展LCA倍增 https://www.luogu.com.cn/blog/morslin/solution-p3379 课程学习 https://www.bilibili.com/video/av82319334 练习题 cdoj1591 AcWing1273. 天才的记忆 Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"algorithms/1-100/1.two-sum.html":{"url":"algorithms/1-100/1.two-sum.html","title":"兩數和","keywords":"","body":"给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 示例: 给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1] 暴力法 两个下标进行循环查找，计算和，时间复杂度O(N^2),空间复杂度O（1） go func twoSum(nums []int, target int) []int { var a []int for i := 0; i javascript var twoSum = function(nums, target) { for (var i = 0; i 使用一个集合 + 一次遍历 时间复杂度O(N)，空间复杂度O(N) javascript var twoSum = function (nums, target) { let hashTable = {} // 字典 for (var i = 0; i 扩展 如果返回所有组合 javascript var twoSum = function(nums, target) { let hashTable = {}, ans = [] for (var i = 0; i Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-15 13:30:58 "},"GLOSSARY.html":{"url":"GLOSSARY.html","keywords":"","body":"Copyright © 木易东水 2020 all right reserved，powered by Gitbook修订时间： 2020-03-07 09:08:52 "}}